


DES_SET_KEY(3)               OpenSSL               DES_SET_KEY(3)


NNAAMMEE
       DES_random_key, DES_set_key, DES_key_sched,
       DES_set_key_checked, DES_set_key_unchecked,
       DES_set_odd_parity, DES_is_weak_key, DES_ecb_encrypt,
       DES_ecb2_encrypt, DES_ecb3_encrypt, DES_ncbc_encrypt,
       DES_cfb_encrypt, DES_ofb_encrypt, DES_pcbc_encrypt,
       DES_cfb64_encrypt, DES_ofb64_encrypt, DES_xcbc_encrypt,
       DES_ede2_cbc_encrypt, DES_ede2_cfb64_encrypt,
       DES_ede2_ofb64_encrypt, DES_ede3_cbc_encrypt,
       DES_ede3_cbcm_encrypt, DES_ede3_cfb64_encrypt,
       DES_ede3_ofb64_encrypt, DES_cbc_cksum, DES_quad_cksum,
       DES_string_to_key, DES_string_to_2keys, DES_fcrypt,
       DES_crypt, DES_enc_read, DES_enc_write - DES encryption

SSYYNNOOPPSSIISS
        #include <openssl/des.h>

        void DES_random_key(DES_cblock *ret);

        int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule);
        int DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule);
        int DES_set_key_checked(const_DES_cblock *key,
               DES_key_schedule *schedule);
        void DES_set_key_unchecked(const_DES_cblock *key,
               DES_key_schedule *schedule);

        void DES_set_odd_parity(DES_cblock *key);
        int DES_is_weak_key(const_DES_cblock *key);

        void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
               DES_key_schedule *ks, int enc);
        void DES_ecb2_encrypt(const_DES_cblock *input, DES_cblock *output,
               DES_key_schedule *ks1, DES_key_schedule *ks2, int enc);
        void DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
               DES_key_schedule *ks1, DES_key_schedule *ks2,
               DES_key_schedule *ks3, int enc);





















AerieBSD 1.0                2009-05-26                          1





DES_SET_KEY(3)               OpenSSL               DES_SET_KEY(3)


        void DES_ncbc_encrypt(const unsigned char *input, unsigned char *output,
               long length, DES_key_schedule *schedule, DES_cblock *ivec,
               int enc);
        void DES_cfb_encrypt(const unsigned char *in, unsigned char *out,
               int numbits, long length, DES_key_schedule *schedule,
               DES_cblock *ivec, int enc);
        void DES_ofb_encrypt(const unsigned char *in, unsigned char *out,
               int numbits, long length, DES_key_schedule *schedule,
               DES_cblock *ivec);
        void DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
               long length, DES_key_schedule *schedule, DES_cblock *ivec,
               int enc);
        void DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
               long length, DES_key_schedule *schedule, DES_cblock *ivec,
               int *num, int enc);
        void DES_ofb64_encrypt(const unsigned char *in, unsigned char *out,
               long length, DES_key_schedule *schedule, DES_cblock *ivec,
               int *num);

        void DES_xcbc_encrypt(const unsigned char *input, unsigned char *output,
               long length, DES_key_schedule *schedule, DES_cblock *ivec,
               const_DES_cblock *inw, const_DES_cblock *outw, int enc);

        void DES_ede2_cbc_encrypt(const unsigned char *input,
               unsigned char *output, long length, DES_key_schedule *ks1,
               DES_key_schedule *ks2, DES_cblock *ivec, int enc);
        void DES_ede2_cfb64_encrypt(const unsigned char *in,
               unsigned char *out, long length, DES_key_schedule *ks1,
               DES_key_schedule *ks2, DES_cblock *ivec, int *num, int enc);
        void DES_ede2_ofb64_encrypt(const unsigned char *in,
               unsigned char *out, long length, DES_key_schedule *ks1,
               DES_key_schedule *ks2, DES_cblock *ivec, int *num);

        void DES_ede3_cbc_encrypt(const unsigned char *input,
               unsigned char *output, long length, DES_key_schedule *ks1,
               DES_key_schedule *ks2, DES_key_schedule *ks3, DES_cblock *ivec,
               int enc);
        void DES_ede3_cbcm_encrypt(const unsigned char *in, unsigned char *out,
               long length, DES_key_schedule *ks1, DES_key_schedule *ks2,
               DES_key_schedule *ks3, DES_cblock *ivec1, DES_cblock *ivec2,
               int enc);
        void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
               long length, DES_key_schedule *ks1, DES_key_schedule *ks2,
               DES_key_schedule *ks3, DES_cblock *ivec, int *num, int enc);
        void DES_ede3_ofb64_encrypt(const unsigned char *in, unsigned char *out,
               long length, DES_key_schedule *ks1,
               DES_key_schedule *ks2, DES_key_schedule *ks3,
               DES_cblock *ivec, int *num);









AerieBSD 1.0                2009-05-26                          2





DES_SET_KEY(3)               OpenSSL               DES_SET_KEY(3)


        DES_LONG DES_cbc_cksum(const unsigned char *input, DES_cblock *output,
               long length, DES_key_schedule *schedule,
               const_DES_cblock *ivec);
        DES_LONG DES_quad_cksum(const unsigned char *input, DES_cblock output[],
               long length, int out_count, DES_cblock *seed);
        void DES_string_to_key(const char *str, DES_cblock *key);
        void DES_string_to_2keys(const char *str, DES_cblock *key1,
               DES_cblock *key2);

        char *DES_fcrypt(const char *buf, const char *salt, char *ret);
        char *DES_crypt(const char *buf, const char *salt);

        int DES_enc_read(int fd, void *buf, int len, DES_key_schedule *sched,
               DES_cblock *iv);
        int DES_enc_write(int fd, const void *buf, int len,
               DES_key_schedule *sched, DES_cblock *iv);

DDEESSCCRRIIPPTTIIOONN
       This library contains a fast implementation of the DES
       encryption algorithm.

       There are two phases to the use of DES encryption.  The
       first is the generation of a _D_E_S___k_e_y___s_c_h_e_d_u_l_e from a key,
       the second is the actual encryption.  A DES key is of type
       _D_E_S___c_b_l_o_c_k. This type is consists of 8 bytes with odd par-
       ity.  The least significant bit in each byte is the parity
       bit.  The key schedule is an expanded form of the key; it
       is used to speed the encryption process.

       _D_E_S___r_a_n_d_o_m___k_e_y_(_) generates a random key.  The PRNG must be
       seeded prior to using this function (see _r_a_n_d(3)).  If the
       PRNG could not generate a secure key, 0 is returned.

       Before a DES key can be used, it must be converted into
       the architecture dependent _D_E_S___k_e_y___s_c_h_e_d_u_l_e via the
       _D_E_S___s_e_t___k_e_y___c_h_e_c_k_e_d_(_) or _D_E_S___s_e_t___k_e_y___u_n_c_h_e_c_k_e_d_(_) function.

       _D_E_S___s_e_t___k_e_y___c_h_e_c_k_e_d_(_) will check that the key passed is of
       odd parity and is not a week or semi-weak key.  If the
       parity is wrong, then -1 is returned.  If the key is a
       weak key, then -2 is returned.  If an error is returned,
       the key schedule is not generated.

       _D_E_S___s_e_t___k_e_y_(_) works like _D_E_S___s_e_t___k_e_y___c_h_e_c_k_e_d_(_) if the
       _D_E_S___c_h_e_c_k___k_e_y flag is non-zero, otherwise like
       _D_E_S___s_e_t___k_e_y___u_n_c_h_e_c_k_e_d_(_).  These functions are available
       for compatibility; it is recommended to use a function
       that does not depend on a global variable.

       _D_E_S___s_e_t___o_d_d___p_a_r_i_t_y_(_) sets the parity of the passed _k_e_y to
       odd.

       _D_E_S___i_s___w_e_a_k___k_e_y_(_) returns 1 is the passed key is a weak
       key, 0 if it is ok.  The probability that a randomly



AerieBSD 1.0                2009-05-26                          3





DES_SET_KEY(3)               OpenSSL               DES_SET_KEY(3)


       generated key is weak is 1/2^52, so it is not really worth
       checking for them.

       The following routines mostly operate on an input and out-
       put stream of _D_E_S___c_b_l_o_c_ks.

       _D_E_S___e_c_b___e_n_c_r_y_p_t_(_) is the basic DES encryption routine that
       encrypts or decrypts a single 8-byte _D_E_S___c_b_l_o_c_k in _e_l_e_c_-
       _t_r_o_n_i_c _c_o_d_e _b_o_o_k (ECB) mode.  It always transforms the
       input data, pointed to by _i_n_p_u_t, into the output data,
       pointed to by the _o_u_t_p_u_t argument.  If the _e_n_c_r_y_p_t argu-
       ment is non-zero (DES_ENCRYPT), the _i_n_p_u_t (cleartext) is
       encrypted in to the _o_u_t_p_u_t (ciphertext) using the
       key_schedule specified by the _s_c_h_e_d_u_l_e argument, previ-
       ously set via _D_E_S___s_e_t___k_e_y. If _e_n_c_r_y_p_t is zero
       (DES_DECRYPT), the _i_n_p_u_t (now ciphertext) is decrypted
       into the _o_u_t_p_u_t (now cleartext).  Input and output may
       overlap.  _D_E_S___e_c_b___e_n_c_r_y_p_t_(_) does not return a value.

       _D_E_S___e_c_b_3___e_n_c_r_y_p_t_(_) encrypts/decrypts the _i_n_p_u_t block by
       using three-key Triple-DES encryption in ECB mode.  This
       involves encrypting the input with _k_s_1, decrypting with
       the key schedule _k_s_2, and then encrypting with _k_s_3.  This
       routine greatly reduces the chances of brute force break-
       ing of DES and has the advantage of if _k_s_1, _k_s_2 and _k_s_3
       are the same, it is equivalent to just encryption using
       ECB mode and _k_s_1 as the key.

       The macro _D_E_S___e_c_b_2___e_n_c_r_y_p_t_(_) is provided to perform two-
       key Triple-DES encryption by using _k_s_1 for the final
       encryption.

       _D_E_S___n_c_b_c___e_n_c_r_y_p_t_(_) encrypts/decrypts using the _c_i_p_h_e_r_-
       _b_l_o_c_k_-_c_h_a_i_n_i_n_g (CBC) mode of DES.  If the _e_n_c_r_y_p_t argument
       is non-zero, the routine cipher-block-chain encrypts the
       cleartext data pointed to by the _i_n_p_u_t argument into the
       ciphertext pointed to by the _o_u_t_p_u_t argument, using the
       key schedule provided by the _s_c_h_e_d_u_l_e argument, and ini-
       tialization vector provided by the _i_v_e_c argument.  If the
       _l_e_n_g_t_h argument is not an integral multiple of eight
       bytes, the last block is copied to a temporary area and
       zero filled.  The output is always an integral multiple of
       eight bytes.

       _D_E_S___x_c_b_c___e_n_c_r_y_p_t_(_) is RSA's DESX mode of DES.  It uses _i_n_w
       and _o_u_t_w to 'whiten' the encryption.  _i_n_w and _o_u_t_w are
       secret (unlike the iv) and are as such, part of the key.
       So the key is sort of 24 bytes.  This is much better than
       CBC DES.

       _D_E_S___e_d_e_3___c_b_c___e_n_c_r_y_p_t_(_) implements outer triple CBC DES
       encryption with three keys. This means that each DES oper-
       ation inside the CBC mode is really an
       "C=E(ks3,D(ks2,E(ks1,M)))".  This mode is used by SSL.



AerieBSD 1.0                2009-05-26                          4





DES_SET_KEY(3)               OpenSSL               DES_SET_KEY(3)


       The _D_E_S___e_d_e_2___c_b_c___e_n_c_r_y_p_t_(_) macro implements two-key
       Triple-DES by reusing _k_s_1 for the final encryption.
       "C=E(ks1,D(ks2,E(ks1,M)))".  This form of Triple-DES is
       used by the RSAREF library.

       _D_E_S___p_c_b_c___e_n_c_r_y_p_t_(_) encrypt/decrypts using the propagating
       cipher block chaining mode used by Kerberos v4. Its param-
       eters are the same as _D_E_S___n_c_b_c___e_n_c_r_y_p_t_(_).

       _D_E_S___c_f_b___e_n_c_r_y_p_t_(_) encrypt/decrypts using cipher feedback
       mode.  This method takes an array of characters as input
       and outputs and array of characters.  It does not require
       any padding to 8 character groups.  Note: the _i_v_e_c vari-
       able is changed and the new changed value needs to be
       passed to the next call to this function.  Since this
       function runs a complete DES ECB encryption per _n_u_m_b_i_t_s,
       this function is only suggested for use when sending small
       numbers of characters.

       _D_E_S___c_f_b_6_4___e_n_c_r_y_p_t_(_) implements CFB mode of DES with 64bit
       feedback.  Why is this useful you ask?  Because this rou-
       tine will allow you to encrypt an arbitrary number of
       bytes, no 8 byte padding.  Each call to this routine will
       encrypt the input bytes to output and then update ivec and
       num.  num contains 'how far' we are though ivec.  If this
       does not make much sense, read more about cfb mode of DES
       :-).

       _D_E_S___e_d_e_3___c_f_b_6_4___e_n_c_r_y_p_t_(_) and _D_E_S___e_d_e_2___c_f_b_6_4___e_n_c_r_y_p_t_(_) is
       the same as _D_E_S___c_f_b_6_4___e_n_c_r_y_p_t_(_) except that Triple-DES is
       used.

       _D_E_S___o_f_b___e_n_c_r_y_p_t_(_) encrypts using output feedback mode.
       This method takes an array of characters as input and out-
       puts and array of characters.  It does not require any
       padding to 8 character groups.  Note: the _i_v_e_c variable is
       changed and the new changed value needs to be passed to
       the next call to this function.  Since this function runs
       a complete DES ECB encryption per numbits, this function
       is only suggested for use when sending small numbers of
       characters.

       _D_E_S___o_f_b_6_4___e_n_c_r_y_p_t_(_) is the same as _D_E_S___c_f_b_6_4___e_n_c_r_y_p_t_(_)
       using Output Feed Back mode.

       _D_E_S___e_d_e_3___o_f_b_6_4___e_n_c_r_y_p_t_(_) and _D_E_S___e_d_e_2___o_f_b_6_4___e_n_c_r_y_p_t_(_) is
       the same as _D_E_S___o_f_b_6_4___e_n_c_r_y_p_t_(_), using Triple-DES.

       The following functions are included in the DES library
       for compatibility with the MIT Kerberos library.

       _D_E_S___c_b_c___c_k_s_u_m_(_) produces an 8 byte checksum based on the
       input stream (via CBC encryption).  The last 4 bytes of
       the checksum are returned and the complete 8 bytes are



AerieBSD 1.0                2009-05-26                          5





DES_SET_KEY(3)               OpenSSL               DES_SET_KEY(3)


       placed in _o_u_t_p_u_t. This function is used by Kerberos v4.
       Other applications should use _E_V_P___D_i_g_e_s_t_I_n_i_t(3) etc.
       instead.

       _D_E_S___q_u_a_d___c_k_s_u_m_(_) is a Kerberos v4 function.  It returns a
       4 byte checksum from the input bytes.  The algorithm can
       be iterated over the input, depending on _o_u_t___c_o_u_n_t, 1, 2,
       3 or 4 times.  If _o_u_t_p_u_t is non-NULL, the 8 bytes gener-
       ated by each pass are written into _o_u_t_p_u_t.

       The following are DES-based transformations:

       _D_E_S___f_c_r_y_p_t_(_) is a fast version of the Unix _c_r_y_p_t(3) func-
       tion.  This version takes only a small amount of space
       relative to other fast _c_r_y_p_t_(_) implementations.  This is
       different to the normal crypt in that the third parameter
       is the buffer that the return value is written into.  It
       needs to be at least 14 bytes long.  This function is
       thread safe, unlike the normal crypt.

       _D_E_S___c_r_y_p_t_(_) is a faster replacement for the normal system
       _c_r_y_p_t_(_).  This function calls _D_E_S___f_c_r_y_p_t_(_) with a static
       array passed as the third parameter.  This emulates the
       normal non-thread safe semantics of _c_r_y_p_t(3).

       _D_E_S___e_n_c___w_r_i_t_e_(_) writes _l_e_n bytes to file descriptor _f_d
       from buffer _b_u_f. The data is encrypted via _p_c_b_c___e_n_c_r_y_p_t
       (default) using _s_c_h_e_d for the key and _i_v as a starting
       vector.  The actual data send down _f_d consists of 4 bytes
       (in network byte order) containing the length of the fol-
       lowing encrypted data.  The encrypted data then follows,
       padded with random data out to a multiple of 8 bytes.

       _D_E_S___e_n_c___r_e_a_d_(_) is used to read _l_e_n bytes from file
       descriptor _f_d into buffer _b_u_f. The data being read from _f_d
       is assumed to have come from _D_E_S___e_n_c___w_r_i_t_e_(_) and is
       decrypted using _s_c_h_e_d for the key schedule and _i_v for the
       initial vector.

       WWaarrnniinngg:: The data format used by _D_E_S___e_n_c___w_r_i_t_e_(_) and
       _D_E_S___e_n_c___r_e_a_d_(_) has a cryptographic weakness: When asked to
       write more than MAXWRITE bytes, _D_E_S___e_n_c___w_r_i_t_e_(_) will split
       the data into several chunks that are all encrypted using
       the same IV.  So don't use these functions unless you are
       sure you know what you do (in which case you might not
       want to use them anyway).  They cannot handle non-blocking
       sockets.  _D_E_S___e_n_c___r_e_a_d_(_) uses an internal state and thus
       cannot be used on multiple files.

       _D_E_S___r_w___m_o_d_e is used to specify the encryption mode to use
       with _D_E_S___e_n_c___r_e_a_d_(_) and _D_E_S___e_n_d___w_r_i_t_e_(_).  If set to
       _D_E_S___P_C_B_C___M_O_D_E (the default), DES_pcbc_encrypt is used.  If
       set to _D_E_S___C_B_C___M_O_D_E DES_cbc_encrypt is used.




AerieBSD 1.0                2009-05-26                          6





DES_SET_KEY(3)               OpenSSL               DES_SET_KEY(3)


NNOOTTEESS
       Single-key DES is insecure due to its short key size.  ECB
       mode is not suitable for most applications; see
       _d_e_s___m_o_d_e_s(7).

       The _e_v_p(3) library provides higher-level encryption func-
       tions.

BBUUGGSS
       _D_E_S___3_c_b_c___e_n_c_r_y_p_t_(_) is flawed and must not be used in
       applications.

       _D_E_S___c_b_c___e_n_c_r_y_p_t_(_) does not modify iivveecc; use
       _D_E_S___n_c_b_c___e_n_c_r_y_p_t_(_) instead.

       _D_E_S___c_f_b___e_n_c_r_y_p_t_(_) and _D_E_S___o_f_b___e_n_c_r_y_p_t_(_) operates on input
       of 8 bits.  What this means is that if you set numbits to
       12, and length to 2, the first 12 bits will come from the
       1st input byte and the low half of the second input byte.
       The second 12 bits will have the low 8 bits taken from the
       3rd input byte and the top 4 bits taken from the 4th input
       byte.  The same holds for output.  This function has been
       implemented this way because most people will be using a
       multiple of 8 and because once you get into pulling bytes
       input bytes apart things get ugly!

       _D_E_S___s_t_r_i_n_g___t_o___k_e_y_(_) is available for backward compatibil-
       ity with the MIT library.  New applications should use a
       cryptographic hash function.  The same applies for
       _D_E_S___s_t_r_i_n_g___t_o___2_k_e_y_(_).

CCOONNFFOORRMMIINNGG TTOO
       ANSI X3.106

       The ddeess library was written to be source code compatible
       with the MIT Kerberos library.

SSEEEE AALLSSOO
       _c_r_y_p_t(3), _d_e_s___m_o_d_e_s(7), _e_v_p(3), _r_a_n_d(3)

HHIISSTTOORRYY
       In OpenSSL 0.9.7, all des_ functions were renamed to DES_
       to avoid clashes with older versions of libdes.  Compati-
       bility des_ functions are provided for a short while, as
       well as _c_r_y_p_t_(_).  Declarations for these are in
       <openssl/des_old.h>. There is no DES_ variant for _d_e_s___r_a_n_-
       _d_o_m___s_e_e_d_(_).  This will happen to other functions as well
       if they are deemed redundant (_d_e_s___r_a_n_d_o_m___s_e_e_d_(_) just calls
       _R_A_N_D___s_e_e_d_(_) and is present for backward compatibility
       only), buggy or already scheduled for removal.

       _d_e_s___c_b_c___c_k_s_u_m_(_), _d_e_s___c_b_c___e_n_c_r_y_p_t_(_), _d_e_s___e_c_b___e_n_c_r_y_p_t_(_),
       _d_e_s___i_s___w_e_a_k___k_e_y_(_), _d_e_s___k_e_y___s_c_h_e_d_(_), _d_e_s___p_c_b_c___e_n_c_r_y_p_t_(_),
       _d_e_s___q_u_a_d___c_k_s_u_m_(_), _d_e_s___r_a_n_d_o_m___k_e_y_(_) and _d_e_s___s_t_r_i_n_g___t_o___k_e_y_(_)



AerieBSD 1.0                2009-05-26                          7





DES_SET_KEY(3)               OpenSSL               DES_SET_KEY(3)


       are available in the MIT Kerberos library;
       _d_e_s___c_h_e_c_k___k_e_y___p_a_r_i_t_y_(_), _d_e_s___f_i_x_u_p___k_e_y___p_a_r_i_t_y_(_) and
       _d_e_s___i_s___w_e_a_k___k_e_y_(_) are available in newer versions of that
       library.

       _d_e_s___s_e_t___k_e_y___c_h_e_c_k_e_d_(_) and _d_e_s___s_e_t___k_e_y___u_n_c_h_e_c_k_e_d_(_) were
       added in OpenSSL 0.9.5.

       _d_e_s___g_e_n_e_r_a_t_e___r_a_n_d_o_m___b_l_o_c_k_(_), _d_e_s___i_n_i_t___r_a_n_d_o_m___n_u_m_b_e_r___g_e_n_e_r_-
       _a_t_o_r_(_), _d_e_s___n_e_w___r_a_n_d_o_m___k_e_y_(_), _d_e_s___s_e_t___r_a_n_d_o_m___g_e_n_e_r_a_-
       _t_o_r___s_e_e_d_(_) and _d_e_s___s_e_t___s_e_q_u_e_n_c_e___n_u_m_b_e_r_(_) and
       _d_e_s___r_a_n_d___d_a_t_a_(_) are used in newer versions of Kerberos but
       are not implemented here.

       _d_e_s___r_a_n_d_o_m___k_e_y_(_) generated cryptographically weak random
       data in SSLeay and in OpenSSL prior version 0.9.5, as well
       as in the original MIT library.

AAUUTTHHOORR
       Eric Young (eay@cryptsoft.com). Modified for the OpenSSL
       project (http://www.openssl.org).




































AerieBSD 1.0                2009-05-26                          8


