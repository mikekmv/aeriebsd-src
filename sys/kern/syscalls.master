;	$ABSD: syscalls.master,v 1.3 2009/12/24 14:39:58 mickey Exp $

;	@(#)syscalls.master	8.2 (Berkeley) 1/13/94

; OpenBSD system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure,
;		and allow it to be "really" varargs.
;	NOLOCK	combined with the above to specify that the call
;		does not need the MP big lock operated
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>
#include <sys/poll.h>
#include <sys/event.h>
#include <xfs/xfs_pioctl.h>

; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0	INDIR		{ int sys_syscall(int number, ...); }
1	STD		{ int sys_sched_yield(void); }
2	STD		{ int sys___sysctl(int *name, u_int namelen, \
			    void *old, size_t *oldlenp, void *new, \
			    size_t newlen); }
3	STD		{ void sys_exit(int rval); }
4	STD		{ int sys_fork(void); }
5	STD		{ int sys_vfork(void); }
6	STD		{ int sys_rfork(int flags); }
7	STD		{ pid_t sys_wait4(pid_t pid, int *status, int options, \
			    struct rusage *rusage); }
8	STD		{ int sys_fchdir(int fd); }
9	STD		{ int sys___getcwd(char *buf, size_t len); }
10	STD		{ int sys_obreak(char *nsize); } break
11	STD NOLOCK	{ pid_t sys_getpid(void); }
12	STD		{ int sys_mount(const char *type, const char *path, \
			    int flags, void *data); }
13	STD		{ int sys_unmount(const char *path, int flags); }
14	STD		{ int sys_setuid(uid_t uid); }
15	STD		{ uid_t sys_getuid(void); }
16	STD		{ uid_t sys_geteuid(void); }
17	STD		{ ssize_t sys_recvmsg(int s, struct msghdr *msg, \
			    int flags); }
18	STD		{ ssize_t sys_sendmsg(int s, \
			    const struct msghdr *msg, int flags); }
19	STD		{ ssize_t sys_recvfrom(int s, void *buf, size_t len, \
			    int flags, struct sockaddr *from, \
			    socklen_t *fromlenaddr); }
20	STD		{ int sys_accept(int s, struct sockaddr *name, \
			    socklen_t *anamelen); }
21	STD		{ int sys_getpeername(int fdes, struct sockaddr *asa, \
			    socklen_t *alen); }
22	STD		{ int sys_getsockname(int fdes, struct sockaddr *asa, \
			    socklen_t *alen); }
23	STD		{ int sys_kill(int pid, int signum); }
24	STD		{ pid_t sys_getppid(void); }
25	STD		{ int sys_dup(int fd); }
26	STD		{ int sys_opipe(void); }
27	STD		{ gid_t sys_getegid(void); }
28	STD		{ int sys_profil(caddr_t samples, size_t size, \
			    u_long offset, u_int scale); }
29	STD		{ int sys_sigaction(int signum, \
			    const struct sigaction *nsa, \
			    struct sigaction *osa); }
30	STD		{ gid_t sys_getgid(void); }
31	STD		{ int sys_sigprocmask(int how, sigset_t mask); }
32	STD		{ int sys_getlogin(char *namebuf, u_int namelen); }
33	STD		{ int sys_setlogin(const char *namebuf); }
34	STD		{ int sys_sigpending(void); }
35	STD		{ int sys_osigaltstack(const struct osigaltstack *nss, \
			    struct osigaltstack *oss); }
36	STD		{ int sys_ioctl(int fd, \
			    u_long com, ... void *data); }
37	STD		{ int sys_reboot(int opt); }
38	STD		{ int sys_revoke(const char *path); }
39	STD		{ int sys_execve(const char *path, \
			    char * const *argp, char * const *envp); }
40	STD		{ mode_t sys_umask(mode_t newmask); }
41	STD		{ int sys_chroot(const char *path); }
42	STD		{ int sys_sbrk(int incr); }
43	STD		{ int sys_sstk(int incr); }
44	STD		{ int sys_getgroups(int gidsetsize, \
			    gid_t *gidset); }
45	STD		{ int sys_setgroups(int gidsetsize, \
			    const gid_t *gidset); }
46	STD		{ int sys_getpgrp(void); }
47	STD		{ int sys_setpgid(pid_t pid, int pgid); }
48	STD		{ int sys_setitimer(int which, \
			    const struct itimerval *itv, \
			    struct itimerval *oitv); }
49	STD		{ int sys_getitimer(int which, \
			    struct itimerval *itv); }
50	STD		{ int sys_dup2(int from, int to); }
51	STD		{ int sys_fcntl(int fd, int cmd, ... void *arg); }
52	STD		{ int sys_setpriority(int which, id_t who, int prio); }
53	STD		{ int sys_socket(int domain, int type, int protocol); }
54	STD		{ int sys_connect(int s, const struct sockaddr *name, \
			    socklen_t namelen); }
55	STD		{ int sys_getpriority(int which, id_t who); }
56	STD		{ int sys_sigreturn(struct sigcontext *sigcntxp); }
57	STD		{ int sys_bind(int s, const struct sockaddr *name, \
			    socklen_t namelen); }
58	STD		{ int sys_setsockopt(int s, int level, int name, \
			    const void *val, socklen_t valsize); }
59	STD		{ int sys_listen(int s, int backlog); }
60	STD		{ int sys_sigsuspend(int mask); }
61	STD		{ int sys_gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
62	STD		{ int sys_getrusage(int who, struct rusage *rusage); }
63	STD		{ int sys_getsockopt(int s, int level, int name, \
			    void *val, socklen_t *avalsize); }
64	STD		{ int sys_settimeofday(const struct timeval *tv, \
			    const struct timezone *tzp); }
65	STD		{ int sys_setreuid(uid_t ruid, uid_t euid); }
66	STD		{ int sys_setregid(gid_t rgid, gid_t egid); }
67	STD		{ int sys_flock(int fd, int how); }
68	STD		{ ssize_t sys_sendto(int s, const void *buf, \
			    size_t len, int flags, const struct sockaddr *to, \
			    socklen_t tolen); }
69	STD		{ int sys_shutdown(int s, int how); }
70	STD		{ int sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
71	STD		{ int sys_adjtime(const struct timeval *delta, \
			    struct timeval *olddelta); }
72	STD		{ int sys_setsid(void); }
73	STD		{ int sys_quotactl(const char *path, int cmd, \
			    int uid, char *arg); }
74	STD		{ void sys_sync(void); }
75	STD		{ int sys_sysarch(int op, void *parms); }
76	STD		{ int sys_setgid(gid_t gid); }
77	STD		{ int sys_setegid(gid_t egid); }
78	STD		{ int sys_seteuid(uid_t euid); }
79	STD		{ int sys_mknod(const char *path, mode_t mode, \
			    dev_t dev); }
80	STD		{ int sys_mkfifo(const char *path, mode_t mode); }
81	STD		{ int sys_mkdir(const char *path, mode_t mode); }
82	STD		{ int sys_rmdir(const char *path); }
83	STD		{ int sys_symlink(const char *path, \
			    const char *link); }
84	STD		{ int sys_readlink(const char *path, char *buf, \
			    size_t count); }
85	STD		{ int sys_rename(const char *from, const char *to); }
86	STD		{ int sys_link(const char *path, const char *link); }
87	STD		{ int sys_unlink(const char *path); }
88	UNIMPL		sys_undelete
89	STD		{ long sys_fpathconf(int fd, int name); }
90	STD		{ int sys_swapctl(int cmd, const void *arg, int misc); }
91	STD		{ int sys_getrlimit(int which, \
			    struct rlimit *rlp); }
92	STD		{ int sys_setrlimit(int which, \
			    const struct rlimit *rlp); }
93	STD		{ int sys_getdirentries(int fd, char *buf, \
			    int count, long *basep); }
94	STD		{ off_t sys_lseek(int fd, int pad, off_t offset, \
			    int whence); }
95	STD		{ pid_t sys_getpgid(pid_t pid); }
96	STD		{ int sys_xfspioctl(int operation, char *a_pathP, \
			    int a_opcode, struct ViceIoctl *a_paramsP, \
			    int a_followSymlinks); }
97	STD		{ int sys_clock_gettime(clockid_t clock_id, \
			    struct timespec *tp); }
98	STD		{ int sys_clock_settime(clockid_t clock_id, \
			    const struct timespec *tp); }
99	STD		{ int sys_clock_getres(clockid_t clock_id, \
			    struct timespec *tp); }
100	UNIMPL		timer_create
101	UNIMPL		timer_delete
102	UNIMPL		timer_settime
103	UNIMPL		timer_gettime
104	UNIMPL		timer_getoverrun
105	STD		{ void *sys_mmap(void *addr, size_t len, int prot, \
			    int flags, int fd, long pad, off_t pos); }
106	STD		{ int sys_munmap(void *addr, size_t len); }
107	STD		{ int sys_mprotect(void *addr, size_t len, \
			    int prot); }
108	STD		{ int sys_madvise(void *addr, size_t len, \
			    int behav); }
109	STD		{ int sys_mincore(void *addr, size_t len, \
			    char *vec); }
110	STD		{ int sys_mlock(const void *addr, size_t len); }
111	STD		{ int sys_munlock(const void *addr, size_t len); }
112	STD		{ int sys_mlockall(int flags); }
113	STD		{ int sys_munlockall(void); }
114	STD		{ int sys_minherit(void *addr, size_t len, \
			    int inherit); }
115	STD		{ int sys_msync(void *addr, size_t len, int flags); }
116	STD		{ void *sys_mquery(void *addr, size_t len, int prot, \
			    int flags, int fd, long pad, off_t pos); }
117	STD		{ int sys_nanosleep(const struct timespec *rqtp, \
			    struct timespec *rmtp); }
118	STD		{ int sys_poll(struct pollfd *fds, \
			    u_int nfds, int timeout); }
119	STD		{ int sys_select(int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
120	STD		{ int sys_issetugid(void); }
121	STD		{ pid_t sys_getsid(pid_t pid); }
122	STD		{ int sys_pipe(int *fdp); }
123	STD		{ int sys_kqueue(void); }
124	STD		{ int sys_kevent(int fd, \
			    const struct kevent *changelist, int nchanges, \
			    struct kevent *eventlist, int nevents, \
			    const struct timespec *timeout); }
125	STD		{ int sys_getpeereid(int fdes, uid_t *euid, \
			    gid_t *egid); }
126	STD		{ int sys_getresuid(uid_t *ruid, uid_t *euid, \
			    uid_t *suid); }
127	STD		{ int sys_setresuid(uid_t ruid, uid_t euid, \
			    uid_t suid); }
128	STD		{ int sys_getresgid(gid_t *rgid, gid_t *egid, \
			    gid_t *sgid); }
129	STD		{ int sys_setresgid(gid_t rgid, gid_t egid, \
			    gid_t sgid); }
130	STD		{ int sys_closefrom(int fd); }
131	STD		{ int sys_sigaltstack(const struct sigaltstack *nss, \
			    struct sigaltstack *oss); }
132	STD		{ int sys_adjfreq(const int64_t *freq, \
			    int64_t *oldfreq); }
133	STD		{ int sys_getfsstat(struct statfs *buf, \
			    size_t bufsize, int flags); }
134	STD		{ int sys_fstatfs(int fd, struct statfs *buf); }
135	STD		{ int sys_fhstatfs(const fhandle_t *fhp, \
			    struct statfs *buf); }
136	STD		{ int sys_getfh(const char *fname, fhandle_t *fhp); }
137	STD		{ int sys_fhopen(const fhandle_t *fhp, int flags); }
138	STD		{ int sys_fhstat(const fhandle_t *fhp, \
			    struct stat *sb); }
139	UNIMPL
140	UNIMPL		aio_open
141	UNIMPL		aio_read
142	UNIMPL		aio_write
143	UNIMPL		aio_fsync
144	UNIMPL		aio_stat
145	UNIMPL		aio_wstat
146	UNIMPL		aio_close
147	UNIMPL		aio_return
148	UNIMPL		aio_cancel
149	UNIMPL

; reserved for future
150	UNIMPL
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
155	UNIMPL
156	UNIMPL
157	UNIMPL
158	UNIMPL
159	UNIMPL
160	UNIMPL
161	UNIMPL
162	UNIMPL
163	UNIMPL
164	UNIMPL
165	UNIMPL
166	UNIMPL
167	UNIMPL
168	UNIMPL
169	UNIMPL

;
; various extensions and options
;
170	UNIMPL		sys_extattrctl
171	UNIMPL		sys_extattr_set_file
172	UNIMPL		sys_extattr_get_file
173	UNIMPL		sys_extattr_delete_file
174	UNIMPL		sys_extattr_set_fd
175	UNIMPL		sys_extattr_get_fd
176	UNIMPL		sys_extattr_delete_fd
#if defined(NFSCLIENT) || defined(NFSSERVER)
177	STD		{ int sys_nfssvc(int flag, void *argp); }
#else
177	UNIMPL
#endif
#ifdef ACCOUNTING
178	STD		{ int sys_acct(const char *path); }
#else
178	UNIMPL		acct
#endif
#ifdef PTRACE
179	STD		{ int sys_ptrace(int req, pid_t pid, caddr_t addr, \
			    int data); }
#else
179	UNIMPL		ptrace
#endif
#ifdef KTRACE
180	STD		{ int sys_ktrace(const char *fname, int ops, \
			    int facs, pid_t pid); }
#else
180	UNIMPL		ktrace
#endif
#ifdef SYSVSEM
181	STD		{ int sys_semget(key_t key, int nsems, int semflg); }
182	STD		{ int sys_semop(int semid, struct sembuf *sops, \
			    size_t nsops); }
183	STD		{ int sys___semctl(int semid, int semnum, int cmd, \
			    union semun *arg); }
#else
181	UNIMPL		semget
182	UNIMPL		semop
183	UNIMPL		___semctl
#endif
#ifdef SYSVSHM
184	STD		{ int sys_shmget(key_t key, size_t size, int shmflg); }
185	STD		{ int sys_shmctl(int shmid, int cmd, \
			    struct shmid_ds *buf); }
186	STD		{ void *sys_shmat(int shmid, const void *shmaddr, \
			    int shmflg); }
187	STD		{ int sys_shmdt(const void *shmaddr); }
#else
184	UNIMPL		shmget
185	UNIMPL		shmctl
186	UNIMPL		shmat
187	UNIMPL		shmdt
#endif
#ifdef SYSVMSG
188	STD		{ int sys_msgget(key_t key, int msgflg); }
189	STD		{ int sys_msgsnd(int msqid, const void *msgp, \
			    size_t msgsz, int msgflg); }
190	STD		{ int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \
			    long msgtyp, int msgflg); }
191	STD		{ int sys_msgctl(int msqid, int cmd, \
			    struct msqid_ds *buf); }
#else
188	UNIMPL		msgget
189	UNIMPL		msgsnd
190	UNIMPL		msgrcv
191	UNIMPL		msgctl
#endif
#ifdef RTHREADS
192	STD		{ pid_t sys_getthrid(void); }
193	STD		{ int sys_thrsleep(void *ident, int timeout, \
			    void *lock); }
194	STD		{ int sys_thrwakeup(void *ident, int n); }
195	STD		{ int sys_threxit(int rval); }
196	STD		{ int sys_thrsigdivert(sigset_t sigmask); }
#else
192	UNIMPL
193	UNIMPL
194	UNIMPL
195	UNIMPL
196	UNIMPL
#endif
197	UNIMPL
198	INDIR		{ quad_t sys___syscall(quad_t num, ...); }
199	UNIMPL

#ifdef LKM
200	NODEF		{ int sys_lkmnosys(void); }
201	NODEF		{ int sys_lkmnosys(void); }
202	NODEF		{ int sys_lkmnosys(void); }
203	NODEF		{ int sys_lkmnosys(void); }
204	NODEF		{ int sys_lkmnosys(void); }
205	NODEF		{ int sys_lkmnosys(void); }
206	NODEF		{ int sys_lkmnosys(void); }
207	NODEF		{ int sys_lkmnosys(void); }
208	NODEF		{ int sys_lkmnosys(void); }
209	NODEF		{ int sys_lkmnosys(void); }
#else	/* !LKM */
200	UNIMPL
201	UNIMPL
202	UNIMPL
203	UNIMPL
204	UNIMPL
205	UNIMPL
206	UNIMPL
207	UNIMPL
208	UNIMPL
209	UNIMPL
#endif	/* !LKM */

; reserved for vendor extensions
210	UNIMPL
211	UNIMPL
212	UNIMPL
213	UNIMPL
214	UNIMPL
215	UNIMPL
216	UNIMPL
217	UNIMPL
218	UNIMPL
219	UNIMPL
220	UNIMPL
221	UNIMPL
222	UNIMPL
223	UNIMPL
224	UNIMPL
225	UNIMPL
226	UNIMPL
227	UNIMPL
228	UNIMPL
229	UNIMPL

230	STD		{ int sys_open(const char *path, \
			    int flags, ... mode_t mode); }
231	STD		{ ssize_t sys_read(int fd, void *buf, size_t nbyte); }
232	STD		{ ssize_t sys_write(int fd, const void *buf, \
			    size_t nbyte); }
233	STD		{ ssize_t sys_readv(int fd, \
			    const struct iovec *iovp, int iovcnt); }
234	STD		{ ssize_t sys_writev(int fd, \
			    const struct iovec *iovp, int iovcnt); }
235	STD		{ ssize_t sys_pread(int fd, void *buf, \
			  size_t nbyte, int pad, off_t offset); }
236	STD		{ ssize_t sys_pwrite(int fd, const void *buf, \
			  size_t nbyte, int pad, off_t offset); }
237	STD		{ ssize_t sys_preadv(int fd, \
			  const struct iovec *iovp, int iovcnt, \
			  int pad, off_t offset); }
238	STD		{ ssize_t sys_pwritev(int fd, \
			  const struct iovec *iovp, int iovcnt, \
			  int pad, off_t offset); }
239	STD		{ int sys_fsync(int fd); }
240	STD		{ int sys_fstat(int fd, struct stat *sb); }
241	STD		{ int sys_ftruncate(int fd, int pad, off_t length); }
242	STD		{ int sys_futimes(int fd, \
			    const struct timeval *tptr); }
243	STD		{ int sys_fchmod(int fd, mode_t mode); }
244	STD		{ int sys_fchown(int fd, uid_t uid, gid_t gid); }
245	STD		{ int sys_fchflags(int fd, u_int flags); }
246	STD		{ int sys_close(int fd); }

247	STD		{ int sys_chdir(const char *path); }
248	STD		{ long sys_pathconf(const char *path, int name); }
249	STD		{ int sys_access(const char *path, int flags); }
250	STD		{ int sys_stat(const char *path, struct stat *ub); }
251	STD		{ int sys_lstat(const char *path, struct stat *ub); }
252	STD		{ int sys_statfs(const char *path, \
			    struct statfs *buf); }
253	STD		{ int sys_truncate(const char *path, int pad, \
			    off_t length); }
254	STD		{ int sys_utimes(const char *path, \
			    const struct timeval *tptr); }
255	STD		{ int sys_chmod(const char *path, mode_t mode); }
256	STD		{ int sys_chown(const char *path, uid_t uid, \
			    gid_t gid); }
257	STD		{ int sys_lchown(const char *path, uid_t uid, \
			    gid_t gid); }
258	STD		{ int sys_chflags(const char *path, u_int flags); }

;
; compatibility prototypes
;

-1	COMPAT_44	{ int sys_getfsstat(struct statfs *buf, long bufsize, \
			    int flags); }
-1	COMPAT_44	{ int sys_statfs(const char *path, \
			    struct ostatfs *buf); }
-1	COMPAT_44	{ int sys_fstatfs(int fd, struct ostatfs *buf); }
-1	COMPAT_44	{ int sys_semsys(int which, int a2, int a3, int a4, \
			    int a5); }
-1	COMPAT_44	{ int sys___semctl(int semid, int semnum, int cmd, \
			    union semun *arg); }
-1	COMPAT_44	{ int sys_msgsys(int which, int a2, int a3, int a4, \
			    int a5, int a6); }
-1	COMPAT_44	{ int sys_msgctl(int msqid, int cmd, \
			    struct omsqid_ds *buf); } 
-1	COMPAT_44	{ int sys_shmsys(int which, int a2, int a3, int a4); }
-1	COMPAT_44	{ int sys_shmctl(int shmid, int cmd, \
			    struct oshmid_ds *buf); }
-1	COMPAT_44	{ int sys_getdomainname(char *domainname, int len); }
-1	COMPAT_44	{ int sys_setdomainname(char *domainname, int len); }
-1	COMPAT_44	{ int sys_stat(const char *path, struct stat44 *ub); }
-1	COMPAT_44	{ int sys_lstat(const char *path, struct stat44 *ub); }
-1	COMPAT_44	{ int sys_fstat(int fd, struct stat44 *sb); }
-1	COMPAT_44	{ int sys_fhstat(const fhandle_t *fhp, \
			    struct stat44 *sb); }
-1	COMPAT_43	{ int sys_creat(const char *path, mode_t mode); }
-1	COMPAT_43	{ long sys_lseek(int fd, long offset, int whence); }
-1	COMPAT_43	{ int sys_stat(const char *path, struct stat43 *ub); }
-1	COMPAT_43	{ int sys_lstat(char *path, struct stat43 *ub); }
-1	COMPAT_43	{ int sys_fstat(int fd, struct stat43 *sb); }
-1	COMPAT_43	{ int sys_getkerninfo(int op, char *where, int *size, \
			    int arg); }
-1	COMPAT_43	{ int sys_getpagesize(void); }
-1	COMPAT_43	{ int sys_mmap(caddr_t addr, size_t len, int prot, \
			    int flags, int fd, long pos); }
-1	COMPAT_43	{ int sys_wait(void); }
-1	COMPAT_43	{ int sys_gethostname(char *hostname, u_int len); }
-1	COMPAT_43	{ int sys_sethostname(char *hostname, u_int len); }
-1	COMPAT_43	{ int sys_getdtablesize(void); } ogetdtablesize
-1	COMPAT_43	{ int sys_accept(int s, caddr_t name, int *anamelen); }
-1	COMPAT_43	{ int sys_send(int s, caddr_t buf, int len, \
			    int flags); }
-1	COMPAT_43	{ int sys_recv(int s, caddr_t buf, int len, \
			    int flags); }
-1	COMPAT_43	{ int sys_sigvec(int signum, struct sigvec *nsv, \
			    struct sigvec *osv); }
-1	COMPAT_43	{ int sys_sigblock(int mask); }
-1	COMPAT_43	{ int sys_sigsetmask(int mask); }
-1	COMPAT_43	{ int sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
-1	COMPAT_43	{ int sys_recvmsg(int s, struct omsghdr *msg, \
			    int flags); }
-1	COMPAT_43	{ int sys_sendmsg(int s, caddr_t msg, int flags); }
-1	COMPAT_43	{ int sys_recvfrom(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t from, int *fromlenaddr); }
-1	COMPAT_43	{ int sys_truncate(const char *path, long length); }
-1	COMPAT_43	{ int sys_ftruncate(int fd, long length); }
-1	COMPAT_43	{ int sys_getpeername(int fdes, caddr_t asa, \
			    socklen_t *alen); }
-1	COMPAT_43	{ int32_t sys_gethostid(void); }
-1	COMPAT_43	{ int sys_sethostid(int32_t hostid); }
-1	COMPAT_43	{ int sys_getrlimit(int which, \
			    struct ogetrlimit *rlp); }
-1	COMPAT_43	{ int sys_setrlimit(int which, \
			    struct ogetrlimit *rlp); }
-1	COMPAT_43	{ int sys_killpg(int pgid, int signum); }
-1	COMPAT_43	{ int sys_quota(void); }
-1	COMPAT_43	{ int sys_getsockname(int fdec, caddr_t asa, \
			    int *alen); }
-1	COMPAT_43	{ int sys_getdirentries(int fd, char *buf, \
			    int count, long *basep); }
-1	COMPAT_43	{ int sys_swapon(const char *name); }
